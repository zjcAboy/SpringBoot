    自定义mapper.xml模板
File - setting 搜索 (file and code templates)
Files - '+'
Name自定义  Extension添加xml
添加模板主体
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="">




</mapper>

    Autowired 报错 cannot autowire .no beans of "XXX" type found
降低Autowired检测的级别，将Severity的级别由之前的error改成warning或其它可以忽略的级别。
File - setting - Editor  - Inspections 将 Autowiring for Bean Class 设置为error之外的警告

    书写SQL无提示
File->Setting->Languages & Frameworks->SQL Dialects中设置Project SQL Dialect 为你自己的数据库。

    连接本地数据库测试
点击右侧DataBase按钮 -> 点击'+'按钮 -> Data Source -> Mysql -> 配置database,url,user,password
testConnection -> apply -> ok

    数据库配置
    mysql命令终端执行1、2、3
    1、创建用户设置密码
create user 'zjc'@'%' identified by 'zjc';
    2、授权
grant all privileges  on ry.* to "zjc"@'%';
    3、刷新
flush privileges;
    springboot项目下的application.properties 或application.yaml 配置添加<>内的内容
<
spring.datasource.url=jdbc:mysql://localhost:3306/xxx?serverTimezone=GMT&useUnicode=true&characterEncoding=UTF-8
//? 表示路径已结束
//useUnicode=true&characterEncoding=UTF-8 设置中文不乱码
//xxx 用数据库名称替换
//serverTimezone=GMT 消除时差
spring.datasource.username=zjc
spring.datasource.password=zjc
//配置账号密码
>

    @Param在Mybatis中的使用
https://www.jianshu.com/p/b8348574c0d9
总结
在mapper接口内的方法定义方法参数别名，在mapper.xml中通过#{别名}或者#{别名.属性}的方式获取传入的参数
eg:
传入基本数据类型
public List<student> selectuser(@Param(value = "page")int pn ,@Param(value = "str")String i);
<select id="selectuser"  resultType="com.user.entity.student">
    SELECT * FROM student
    where sname like concat(concat("%",#{str}),"%")
    LIMIT #{page} ,5
</select>
eg:
传入基本数据类型和实体类对象
public List<student> selectuser(@Param(value = "page")int pn ,@Param(value = "st")student student);
<select id="selectuser"  resultType="com.user.entity.student">
    SELECT * FROM student
    where sname like concat(concat("%",#{st.sname}),"%")
    LIMIT #{page} ,5
</select>
eg:
Map封装
public List<XXXBean> getXXXBeanList(@Param("id")String id, @Param("code")String code);
<select id="getXXXBeanList" resultType="XXBean">

　　select t.* from tableName where id = #{id} and name = #{code}

</select>
eg:
List封装
public List<XXXBean> getXXXBeanList(List<String> list);

<select id="getXXXBeanList" resultType="XXBean">
　　select 字段... from XXX where id in
　　<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
　　　　#{item}
　　</foreach>
</select>
foreach字段解释
解释含义：
foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。
foreach元素的属性主要有 item，index，collection，open，separator，close。
item集合中每一个元素进行迭代时的别名，
index表示在迭代过程中，每次迭代到的位置，
open该语句以什么开始，
separator在每次进行迭代之间以什么符号作为分隔 符，
close以什么结束，
在使用foreach的时候最关键的也是最容易出错的就是collection属性，
该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，
主要有一下3种情况：
1.     如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
2.     如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
3.     如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了
假设有1,2,3,4的list 将生成(1,2,3,4)的语句














